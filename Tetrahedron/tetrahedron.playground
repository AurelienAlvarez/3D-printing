//: Tetrahedron. Computes a STL file.

import Cocoa

let vertices = [[0.0, 0.0, sqrt(2)], [1.0, 0.0, 0.0], [-0.5, sqrt(3)/2, 0.0], [-0.5, -sqrt(3)/2, 0.0]]

let faces = [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]]

let scale: Double = 100

/////////////////////
/////////////////////

print("solid tetrahedron")

func compute_normal(face: [Int]) -> [Double] {
    let v1x = vertices[face[1]][0]-vertices[face[0]][0]
    let v1y = vertices[face[1]][1]-vertices[face[0]][1]
    let v1z = vertices[face[1]][2]-vertices[face[0]][2]
    let v2x = vertices[face[2]][0]-vertices[face[0]][0]
    let v2y = vertices[face[2]][1]-vertices[face[0]][1]
    let v2z = vertices[face[2]][2]-vertices[face[0]][2]
    let nx = v1y * v2z - v1z * v2y
    let ny = v2x * v1z - v2z * v1x
    let nz = v1x * v2y - v1y * v2x
    let norm = sqrt(nx * nx + ny * ny + nz * nz)
    return [nx/norm, ny/norm, nz/norm]
}

for face in faces {
    let normal =  compute_normal(face: face)
    print("facet normal \(normal[0]) \(normal[1]) \(normal[2])")
    print("  outer loop")
    for vertex in face {
        print("    vertex \(scale * vertices[vertex][0]) \(scale * vertices[vertex][1]) \(scale * vertices[vertex][2])")
    }
    print("  endloop")
    print("endfacet")
}

print("endsolid")
